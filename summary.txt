
fillRect나 
rect는 직사각형을 만들기 위한 shortcut 이다. 

ctx.arc(290,140,50,0,2 * Math.PI);

function onclick(event){
ctx.beginPath();
ctx.moveTo(x_coord,y_coord);
ctx.strokeStyle = colors[Math.floor(Math.random()*colors.length)];
ctx.lineTo(event.offsetX, event.offsetY);
ctx.stroke();
}
// If user lick the mouse, save the mouse point and make a circle.
function cursor_move(event){
x_coord = event.offsetX;
y_coord = event.offsetY;
ctx.beginPath();
ctx.arc(x_coord, y_coord, 10, 0, 2*Math.PI);
ctx.fillStyle = colors[Math.floor(Math.random()*colors.length)];
ctx.fill();
}
canvas.addEventListener("mousemove", onclick);
canvas.addEventListener("click", cursor_move);

const canvas = document.querySelector("canvas");
const ctx = canvas.getContext("2d");
let isPainting = false;

canvas.width = 800;
canvas.height = 800;

function onMove(event) {
    if (isPainting) {
        ctx.lineTo(event.offsetX,event.offsetY);
        ctx.stroke();
        return;
    }
    ctx.moveTo(event.offsetX, event.offsetY);
}
function startPainting() {
  isPainting = true;
}

function cancelPainting (){
    isPainting = false;
}



canvas.addEventListener("mousemove", onMove);
canvas.addEventListener("mousedown", startPainting);
canvas.addEventListener("mouseup", cancelPainting);
canvas.addEventListener("mouseleave", cancelPainting);

function onColorChange(event) {
    ctx.strokeStyle = event.target.value;
    ctx.fillStyle = event.target.value;
}

function onColorClick (event) {
    const colorValue = event.target.dataset.color;
    ctx.strokeStyle =  colorValue;
    ctx.fillStyle =  colorValue;
    color.value = colorValue;

  
}

color.addEventListener("change", onColorChange);

colorOptions.forEach((color) => color.addEventListener("click", onColorClick));


function onModeClick () {
    if (isFilling) {
        isFilling = false;
        modeBtn.innerText ="Fill";
    } else {
        isFilling =true;
        modeBtn.innerText ="Draw";
    }
}

modeBtn.addEventListener("click", onModeClick);

function onCavasClick () {
    if(isFilling) {
        ctx.fillRect(0,0,800,800);
    }
}


canvas.addEventListener("click", onCavasClick);


function onDestroyClick () {
    ctx.fillStyle = "white";
    ctx.fillRect(0,0, CANVAS_WIDTH, CANVAS_HEIGHT);
   
}

destroyBtn.addEventListener("click", onDestroyClick);

function onEraserClick () {
    ctx.strokeStyle = "white";
    isFilling = false; 
    modeBtn.innerText ="Fill";
}



eraseBtn.addEventListener("click", onEraserClick);


   <div class="color-options">

        <input type="color" id="color">
        <div class="color-option" style="background-color:#1abc9c" data-color="#1abc9c"></div>
        <div class="color-option" style="background-color:#3498db" data-color="#3498db"></div>
        <div class="color-option" style="background-color:#34495e" data-color="#34495e"></div>
        <div class="color-option" style="background-color:#27ae60" data-color="#27ae60"></div>
        <div class="color-option" style="background-color:#8e44ad" data-color="#8e44ad"></div>
        <div class="color-option" style="background-color:#f1c40f" data-color="#f1c40f"></div>
        <div class="color-option" style="background-color:#e74c3c" data-color="#e74c3c"></div>
        <div class="color-option" style="background-color:#95a5a6" data-color="#95a5a6"></div>
        <div class="color-option" style="background-color:#d35400" data-color="#d35400"></div>
        <div class="color-option" style="background-color:#2ecc71" data-color="#2ecc71"></div>
        <div class="color-option" style="background-color:#e67e22" data-color="#e67e22"></div>
    </div>

    <canvas></canvas>

    <div class="btns">
        <input id="line-width" type="range" min="1" max="10" value="5" step="0.5">
        <button id="mode-btn">Fill</button>
        <button id="destroy-btn">Destory</button>
        <button id="eraser-btn">Erase</button>
        <label for="file">Add Photo </label>
        <input id="file" type="file" accept="image/*">

        <input id="text" type="text" placeholder="Add Text :)">
        <button id="save">Save </button>

    </div>




    js

    const saveBtn = document.getElementById("save");
const textInput = document.getElementById("text");
const fileInput = document.getElementById("file");
const modeBtn = document.getElementById("mode-btn");
const destroyBtn = document.getElementById("destroy-btn");
const eraseBtn = document.getElementById("eraser-btn");

const colorOptions = Array.from(document.getElementsByClassName("color-option"));
const color =document.getElementById("color");
const canvas = document.querySelector("canvas");
const ctx = canvas.getContext("2d");
const lineWidth = document.getElementById("line-width");


const CANVAS_WIDTH = 800;
const CANVAS_HEIGHT = 800;

let isPainting = false;
let isFilling = false;

canvas.width = CANVAS_WIDTH ;
canvas.height =  CANVAS_HEIGHT;
ctx.lineWidth = lineWidth.value;
ctx.lineCap = "round";


function onSaveClick () {
    const url = canvas.toDataURL();
    const a = document.createElement("a");
    a.href = url;
    a.download = "myDrawing.png"
    a.click();

}


saveBtn.addEventListener("click", onSaveClick);

function onDoubleClick (event) {
    const text = textInput.value;
    if (text !== "") {
       ctx.save();
     
       ctx.lineWidth = 1;
       ctx.font = "38px serif";
       ctx.fillText(text,event.offsetX, event.offsetY);
       ctx.restore();
    };
       
   }
   
   canvas.addEventListener("dblclick", onDoubleClick);


function onFileChange (event) {
    const file = event.target.files[0];
    const url = URL.createObjectURL(file);
    const image = new Image();
    image.src= url;
    image.onload = function () {
        ctx.drawImage(image, 0, 0,CANVAS_WIDTH, CANVAS_HEIGHT);
        fileInput.value = "";
    };
    }

    fileInput.addEventListener("change", onFileChange);    

function onMove(event) {
    if (isPainting === true) {
        ctx.lineTo(event.offsetX,event.offsetY);
        ctx.stroke();
        return;
    }
    ctx.beginPath();
    ctx.moveTo(event.offsetX, event.offsetY);
}
function startPainting() {
  isPainting = true;
}

function cancelPainting (){
    isPainting = false;
}

function onLineWidthChange(event) {
   ctx.lineWidth = event.target.value;
}

function onColorChange(event) {
    ctx.strokeStyle = event.target.value;
    ctx.fillStyle = event.target.value;
}

function onColorClick (event) {
    const colorValue = event.target.dataset.color;
    ctx.strokeStyle =  colorValue;
    ctx.fillStyle =  colorValue;
    color.value = colorValue;

  
}

function onModeClick () {
    if (isFilling) {
        isFilling = false;
        modeBtn.innerText ="Fill";
    } else {
        isFilling =true;
        modeBtn.innerText ="Draw";
    }
}
function onCavasClick () {
    if(isFilling) {
        ctx.fillRect(0,0, CANVAS_WIDTH, CANVAS_HEIGHT);
    }
}

function onDestroyClick () {
    ctx.fillStyle = "white";
    ctx.fillRect(0,0, CANVAS_WIDTH, CANVAS_HEIGHT);
   
}

function onEraserClick () {
    ctx.strokeStyle = "white";
    isFilling = false; 
    modeBtn.innerText ="Fill";
}


canvas.addEventListener("mousemove", onMove);
canvas.addEventListener("mousedown", startPainting);
canvas.addEventListener("mouseup", cancelPainting);
canvas.addEventListener("mouseleave", cancelPainting);
canvas.addEventListener("click", onCavasClick);

lineWidth.addEventListener("change", onLineWidthChange);
color.addEventListener("change", onColorChange);

colorOptions.forEach((color) => color.addEventListener("click", onColorClick));


modeBtn.addEventListener("click", onModeClick);
destroyBtn.addEventListener("click", onDestroyClick);
eraseBtn.addEventListener("click", onEraserClick);

css 

@import "reset.css";


body {
    display: flex;
    gap:20px;
    justify-content: space-between;
    align-items: flex-start;
    background-color: gainsboro;
    padding: 20px;
    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
}
canvas {
    width:800px;
    height:800px;
    background-color: white;
    border-radius: 10px;

}

body {
    display: flex;
    justify-content: center;
    align-items: center;
}

.btns {
    display: flex;
    flex-direction: column;
    gap:20px;
    
}

.color-options {
    display: flex;
    flex-direction: column;
    gap:10px;
    align-items: center;
   
}

.color-option:hover {
    transform: scale(1.2);
}
.color-option {
    width:50px;
    height:50px;
    cursor: pointer;
    border-radius: 50%;
    border:5px solid white;
    transition:transform ease-in-out .3s;
}

input#color {
    background-color: white;
    
}

button,
label {
    all:unset;
    padding:10px 0px;
    text-align: center;
    background-color: royalblue;
    color: white;
    font-weight: 500;
    cursor:pointer;
    border-radius: 10px;
    transition: opacity linear .2s;
    box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);
}

button:hover {
    opacity: 0.85;
}
input#file {
    display: none;
}

input#text {
    all:unset;
    padding:10px 0px;
    text-align: center;
    border-radius: 10px;background-color: white;
    font-weight: 500;
    box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);

}

